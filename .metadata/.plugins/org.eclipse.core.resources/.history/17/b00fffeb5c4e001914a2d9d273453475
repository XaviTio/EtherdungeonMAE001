// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

/**
 * Team.java implements the Team Java Generics class.
 * @author Felix Zapata
 * Date: 21/03/2019
 * ISAE - SUPAERO MAE1
 */

package MAE1Project;

/****************** IMPORT MODULES **************************/

import java.util.LinkedList;		// Import Java LinkedLists

/************************************************************/
/**
 * Team is a Java Generics class which can only accept as type
 * variable any child from Individual. Thus, it constitutes a 
 * Java Generics with bounded type variable. The idea behind this
 * class is to reduce the amount of code required.
 */
public class Team<T extends Individual> {
	/**
	 * members property defines the members that belong to the
	 * team. It is implemented via a LinkedList.
	 */
	private LinkedList<T> members;
	
	/**
	 * Class constructor
	 * @param newMember: instance of type T, child of Individual which is
	 * to be added to the new Team instance.
	 */
	public Team(T newMember) {
		// Instantiate the LinkedList and add the member to the list
		this.members = new LinkedList<T>();
		this.add_member(newMember);
	}
	
	/**
	 * Class constructor 
	 * @param newMembers: array if instances of type T of any length which will
	 * be part of the new Team instance.
	 */
	public Team(T[] newMembers) {
		// Instantiate the LinkedList
		this.members = new LinkedList<T>();
		
		// Add the members to the team
		for (T elem :  newMembers) 
		{
			// Add member to the team
			this.add_member(elem);
		}
	}

	public LinkedList<T> getMembers() {
		return members;
	}

	public void setMembers(LinkedList<T> members) {
		this.members = members;
	}

	/**
	 * update() method removes those members of the team
	 * who are dead.
	 */
	public void update() {
		// Loop through the LinkedList and remove those members
		// who are dead
		for (T elem : this.members) 
		{
			// Ask if the element is dead
			if (elem.isDead()) 
			{
				this.remove_member(elem);
			}
		}
	}
	
	/**
	 * add_member adds a new member to the Team
	 * @param newMember: instance of type T to be added to the Team
	 */
	public void add_member(T newMember) {
		
		// Check the member is not in the LinkedList
		if (!this.members.contains(newMember)) 
		{
			// Add the newMember to the list
			this.members.add(newMember);
		}
	}
	
	/**
	 * remove_member removes the specified member from the Team
	 * @param member: instance of type T to be removed from the Team
	 */
	public void remove_member(T member) {
		
		// Check that the member is in the LinkedList
		if (this.members.contains(member))
		{
			// Remove the element from the list
			this.members.remove(member);
		}
	}
};
