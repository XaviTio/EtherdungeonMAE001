// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

/**
 * Team.java implements the Team Java Generics class.
 * @author Felix Zapata
 * Date: 21/03/2019
 * ISAE - SUPAERO MAE1
 */

package MAE1Project;

//------------------ IMPORT MODULES ---------------------------//

import java.util.LinkedList;		// Import Java LinkedLists
import java.util.ArrayList;			// Import Java ArrayList


/************************************************************/
/**
 * Team is a Java Generics class which can only accept as type
 * variable any child from Individual. Thus, it constitutes a 
 * Java Generics with bounded type variable. The idea behind this
 * class is to reduce the amount of code required.
 */
public class Team<T extends Individual> {
	
	//------------------- PROPERTIES ---------------------------//
	
	
	/**
	 * members property defines the members that belong to the
	 * team. It is implemented via a LinkedList.
	 */
	private LinkedList<T> members;
	
	/**
	 * participationQueue property defines a queue of the participation
	 * of each member in an encounter to assign priority to participation.
	 */
	private ArrayList<Boolean> participationQueue;
	
	//---------------------- METHODS ---------------------------//
	
	/**
	 * Class constructor, based on type inference feature included from
	 * Java 7.
	 */
	public Team() {
		// Instantiate the LinkedList
		this.members = new LinkedList<T>();
		this.participationQueue = new ArrayList<Boolean>();
	}
	/**
	 * Class constructor
	 * @param newMember: instance of type T, child of Individual which is
	 * to be added to the new Team instance.
	 */
	public Team(T newMember) {
		// Instantiate the LinkedList and add the member to the list
		this.members = new LinkedList<T>();
		this.participationQueue = new ArrayList<Boolean>();
		this.add_member(newMember);
	}
	
	/**
	 * Class constructor 
	 * @param newMembers: array if instances of type T of any length which will
	 * be part of the new Team instance.
	 */
	public Team(T[] newMembers) {
		// Instantiate the LinkedList
		this.members = new LinkedList<T>();
		this.participationQueue = new ArrayList<Boolean>();
		
		// Add the members to the team
		for (T elem :  newMembers) 
		{
			// Add member to the team
			this.add_member(elem);
		}
	}

	/**
	 * update() method removes those members of the team
	 * who are dead.
	 */
	public void update() {
		// Loop through the LinkedList and remove those members
		// who are dead
		for (T elem : this.members) 
		{
			// Ask if the element is dead
			if (elem.isDead()) 
			{	
				// Remove first from participationQueue, then from members
				this.participationQueue.remove(this.members.indexOf(elem));
				this.remove_member(elem);
			}
		}
	}
	
	/**
	 * add_member adds a new member to the Team
	 * @param newMember: instance of type T to be added to the Team
	 */
	public void add_member(T newMember) {
		
		// Check the member is not in the LinkedList
		if (!this.members.contains(newMember)) 
		{
			// Add the newMember to the list
			this.members.add(newMember);
			// Add a new entry to the participation queue with false default value
			this.participationQueue.add(false);
		}
	}
	
	/**
	 * remove_member removes the specified member from the Team
	 * @param member: instance of type T to be removed from the Team
	 */
	public void remove_member(T member) {
		
		// Check that the member is in the LinkedList
		if (this.members.contains(member))
		{
			// First remove from the participation queue
			this.participationQueue.remove(this.members.indexOf(member));
			
			// Remove the element from the list
			this.members.remove(member);
		}
	}

	/**
	 * toString method converts the Team instance into a representative
	 * string.
	 * @return: String representing the current state of the team
	 */
	public String toString() {
		// Initialize the string
		// TODO implement error handling when the list members is not populated.
		String out = String.format("Team: %s", this.members.getFirst().returnClassTeam());
		
		// Team counter
		int counter = 0;
		
		// Run a loop through every member in the linked list to conform a string
		for (T elem : this.members)
		{
			// Update the counter
			counter += 1;
			// Append element string
			out += String.format("\n | %d ).  %s | \n", counter, elem.toString());
		}
		
		// Return out string
		return out;
	}
	
	/***************** GETTERS AND SETTERS ******************/
	
	public void setMembers(LinkedList<T> members) {
		this.members = members;
	}
	
	public LinkedList<T> getMembers() {
		return members;
	}
	public ArrayList<Boolean> getParticipationQueue() {
		return participationQueue;
	}
	public void setParticipationQueue(ArrayList<Boolean> participationQueue) {
		this.participationQueue = participationQueue;
	}
	
	
};
