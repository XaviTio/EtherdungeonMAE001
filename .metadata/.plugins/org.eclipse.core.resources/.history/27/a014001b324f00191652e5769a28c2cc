// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

/**
 * Team.java implements the Team Java Generics class.
 * @author Felix Zapata
 * Date: 21/03/2019
 * ISAE - SUPAERO MAE1
 */

package MAE1Project;

//------------------ IMPORT MODULES ---------------------------//

// No modules to import

/************************************************************/

public abstract class Individual{
	
	// ------------------ PROPERTIES ------------------------ //
	
	/**
	 * String Name property corresponds to the name of the individual in the actual course of the game.
	 */
	private String name;
	/**
	 * float Health represents the status of the individual. If 0 the individual is dead,
	 * if 100 the individual has full health.
	 */
	private float health = 100;
	/**
	 * float performance indicate the performance of the individual on the action it is meant to perform.
	  * 
	 */
	private float performance;
	/**
	 * boolean isDead indicates if the Individual is dead or not based on his current health.
	 */
	private boolean isDead = false;
	/**
	 * UI instance used to command the execution on screen of the program.
	 */
	public UI ui;
	/**
	 * String type used to identify the class type
	 */
	private String type = null;
	/**
	 * Action myAction instance that defines the Individual object
	 */
	private Action myAction;
	
	//----------------------- METHODS ---------------------------//
	
	/**
	 * Class constructor 1
	 * @param type: String defining the type of the Individual
	 * @param name: String defining the name of the Individual
	 * @param action: Action instance related to the Individual
	 * @param performance: float indicating the relative performance
	 * of the Individual related to its action
	 */
	public Individual(String type, String name, Action action,float performance) {
		// Set the properties of the constructor
		this.setType(type);
		this.setName(name);
		this.setMyAction(action);
		this.setPerformance(performance);
		this.setUi(UI.INSTANCE);
	}
	
	/**
	 * performAction implementation over a Team of victims
	 * @param victims: Team of victims.
	 */
	public abstract <T extends Individual> void performAction(Team<T> victims);

	/**
	 * performAction implementation over a single victim
	 * @param victim: Individual instance over which we want to
	 * perform the action.
	 */
	public abstract void performAction(Individual victim);

	/**
	 * retaliate automatically performs the action on the offender
	 * object.
	 * @param offender: Individual instance over which the object
	 * desires to retaliate
	 */
	public void retaliate(Individual offender) {
		// Perform the action over the offender
		this.performAction(offender);
	}

	/**
	 * performAction method implementation discriminates between friend
	 * or foe in order to performAction over a group of objects
	 * @param mates: Team of mates instances
	 * @param victims: Team of victims instances
	 */
	public abstract <T extends Individual, Q extends Individual> void  performAction(Team<T> mates, Team<Q> victims);

	/**
	 * toString method converts the Individual instance into a string
	 * representation which can be later printed to screen.
	 * @return String output which represents the Individual instance
	 * state.
	 */
	public String toString() {
		// Define a format for printing the object.
		// The information contained in the print out is:
		// Name, Type, health
		
		// Define the format
		String format = "%s of type: %s from team: %s, health: %3.1f";
		
		// Create the output
		String output = String.format(format, this.getName(), 
									  this.returnClassName(),
									  this.returnClassTeam(),
									  this.getHealth());
		
		// Return the output
		return output;
	}

	/**
	 * prettyPrint method prints the Individual instance to a representative
	 * string which describes the current state of the object.
	 */
	public void prettyPrint() {
		// Get the object's string representation by means of toString()
		// method.
		String output = this.toString();
		
		// Print the object to screen
		this.ui.printToScreen(output);
	}

	/**
	 * returnClassName method is an abstract method that returns a String
	 * containing the class name
	 * @return className: String containing the class name
	 */
	public abstract String returnClassName();
	
	/**
	 * returnClassTeam is an abstract method that returns a String
	 * which defines the Team to which the Individual belongs to.
	 * @return String to which the Individual belongs to
	 */
	public abstract String returnClassTeam();
	
	/***************** GETTERS AND SETTERS ******************/
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public float getHealth() {
		return health;
	}

	public void setHealth(float health) {
		this.health = health;
	}

	public float getPerformance() {
		return performance;
	}

	public void setPerformance(float performance) {
		this.performance = performance;
	}

	public boolean isDead() {
		return isDead;
	}

	public void setDead(boolean isDead) {
		this.isDead = isDead;
	}

	public UI getUi() {
		return ui;
	}

	public void setUi(UI ui) {
		this.ui = ui;
	}

	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		// Check the property has been initialized, otherwise do nothing
		if (this.getType() == null) 
		{
			this.type = type;
		}
	}

	public Action getMyAction() {
		return myAction;
	}

	public void setMyAction(Action myAction) {
		this.myAction = myAction;
	}
};
